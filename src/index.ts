import { app, BrowserWindow, ipcMain } from "electron";
import "../env-variables.ts";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    maximizable: false,
    resizable: false,
    closable: true,
    frame: true,
    backgroundColor: "#000",
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      scrollBounce: false,
      navigateOnDragDrop: false,
      spellcheck: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// const path = requireDynamically('path');
// function requireDynamically(value: string) {
//   value = value.split('\\').join('/'); // Normalize windows slashes
//   return eval(`require('${value}');`); // Ensure Webpack does not analyze the require statement
// }
const path = require("path");
const fs = require("fs");

ipcMain.handle("getLocalData", (event, gameName) => {
  const localToolsPath = path.resolve(`./tools/${gameName}`);
  if (!fs.existsSync(`./tools/${gameName}/gameTools.json`)) {
    fs.mkdirSync(`./tools/${gameName}`, { recursive: true });
    fs.writeFileSync(`./tools/${gameName}/gameTools.json`, "{}");
  }

  const localData = JSON.parse(
    fs.readFileSync(`${localToolsPath}/gameTools.json`)
  );

  return localData;
});

ipcMain.handle("openApp", (event, toolPath) => {
  return;
});

ipcMain.handle("closeApp", (event, toolPath) => {
  return;
});

ipcMain.handle("openToolsFolder", (event, toolPath) => {
  return;
});

ipcMain.handle("checkToolExists", (event, toolPath) => {
  return;
});
